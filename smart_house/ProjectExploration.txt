Дом хранит структуру помещений и устройств. Он ничего не знает о хранимых устройствах.

Устройства, в свою очередь, ничего не знают о доме. Они реализуют свой функционал.

Дому, для построения отчёта, требуется источник информации о состоянии хранимых в нём устройств.
Этот источник информации можно принимать в качестве аргумента в метод построения отчёта. 

Вопрос: Что он должен из себя представлять?
Ответ: Достаточно, чтобы этот источник информации умел предоставлять состояние устройства по некоторому идентификатору. 

Вопрос: Какой уникальный идентификатор устройства знает дом? 
Ответ: Сочетание двух строк: имени комнаты и имени устройства.

Вопрос: Как нам выразить эти идеи на языке программирования?
Ответ:
1) Нам надо описать сущность, которая умеет принимать идентификатор (пару строк) и возвращать состояние соответствующего устройства.
Для этого нам не обязательно фиксировать какой-то конкретный тип. Достаточно описать интерфейс. В раст это делается с помощью трейтов.
Значит, нам нужен трейт, с одним методом: принимающим пару строк, и возвращающий строку - состояние устройства.
2) Нам нужно принимать в метод построения отчёта любой тип, реализующий наш трейт. В Rust это описывается с помощью generic типов и trait bounds для них.
Значит, метод построения отчёта о доме должен принимать источник информации об устройствах в виде generic типа, реализующего наш трейт из пункта 1.

Теперь пользователь может определять свои типы источников информации об устройствах. Реализовывать для них трейт из библиотеки.
И передавать их в функцию построения отчёта.

Есть другие варианты решения задачи.

1) хранить устройства в комнатах  дома в виде трейт-объектов. Общий трейт для всех устройств должен уметь возвращать состояние устройства.
Такой подход позволяет нам не задумываться об отдельном хранилище для устройств, но при этом имеет недостаток: превращая устройства в трейт-объект,
мы теряем информацию о их конкретных типах. Из-за этого мы не сможем, например, узнать температуру термометра, так как нельзя будет включить
получение температуры в общий интерфейс для термометра и розетки.

2) хранить устройства в доме в виде перечисления с данными. Используя данный подход мы, также, не будем думать об отдельном хранилище для устройств.
Более того, мы сможем получить доступ к конкретному типу устройства, используя сопоставление с шаблоном для нашего перечисления с устройствами.
Но появляется новое ограничение: список устройств теперь жёстко фиксирован и для использования устройства, которое отсутствует в перечислении,
мы должны будем менять код библиотеки.

Подход, предложенный в предыдущем сообщении лишён недостатков, которые мы увидели у 1) и 2).
Это достигается за счёт передачи ответственности за устройства и их связь с домом внешней сущности - клиентскому коду.
